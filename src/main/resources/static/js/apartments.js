// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
let apartments = [];
let apartmentMarkers = [];
let selectedApartment = null;
let currentInfoWindow = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
function initializeApartments() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã
    loadApartments();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
    const priceFilter = document.getElementById('price-filter');
    const ratingFilter = document.getElementById('rating-filter');
    const guestsFilter = document.getElementById('guests-filter');
    const resetFiltersBtn = document.getElementById('reset-filters');
    const closeDetailsBtn = document.getElementById('close-details-btn');
    
    if (priceFilter) {
        priceFilter.addEventListener('input', filterApartments);
    }
    
    if (ratingFilter) {
        ratingFilter.addEventListener('change', filterApartments);
    }
    
    if (guestsFilter) {
        guestsFilter.addEventListener('change', filterApartments);
    }
    
    if (resetFiltersBtn) {
        resetFiltersBtn.addEventListener('click', resetFilters);
    }
    
    if (closeDetailsBtn) {
        closeDetailsBtn.addEventListener('click', closeApartmentDetails);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
async function loadApartments() {
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤...');
        
        // –°–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        await generateMockApartments();
        
        // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã
        await loadAllApartments();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ
        displayApartmentsOnMap();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
        displayApartmentsList();
        
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:', error);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        apartments = [];
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        try {
            displayApartmentsList();
        } catch (displayError) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞:', displayError);
        }
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function generateMockApartments() {
    try {
        const response = await fetch('/api/apartments/generate-mock', {
            method: 'POST'
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        }
        
        console.log('–ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
async function loadAllApartments() {
    try {
        const response = await fetch('/api/apartments');
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤');
        }
        
        const data = await response.json();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if (Array.isArray(data)) {
            apartments = data;
        } else if (data.apartments && Array.isArray(data.apartments)) {
            apartments = data.apartments;
        } else if (data.success && data.apartments && Array.isArray(data.apartments)) {
            apartments = data.apartments;
        } else {
            console.warn('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API:', data);
            apartments = [];
        }
        
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:', apartments.length);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:', error);
        apartments = [];
    }
}

// –ü–æ–∏—Å–∫ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É
async function searchApartmentsByCity(city) {
    try {
        const response = await fetch(`/api/apartments/by-city?city=${encodeURIComponent(city)}`);
        const result = await response.json();
        
        if (result.success) {
            apartments = result.apartments;
            displayApartmentsOnMap();
            displayApartmentsList();
            console.log(`–ù–∞–π–¥–µ–Ω–æ ${apartments.length} –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –≤ –≥–æ—Ä–æ–¥–µ ${city || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥'}`);
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:', result.message);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:', error);
    }
}

// –ü–æ–∏—Å–∫ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async function searchApartmentsNearLocation(latitude, longitude, radius = 10.0) {
    try {
        const response = await fetch(`/api/apartments/near-location?latitude=${latitude}&longitude=${longitude}&radius=${radius}`);
        const result = await response.json();
        
        if (result.success) {
            apartments = result.apartments;
            displayApartmentsOnMap();
            displayApartmentsList();
            console.log(`–ù–∞–π–¥–µ–Ω–æ ${apartments.length} –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ ${radius || 10.0} –∫–º`);
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:', result.message);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
function displayApartmentsOnMap() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (typeof map === 'undefined' || !map) {
        console.warn('–ö–∞—Ä—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Google Maps API –∑–∞–≥—Ä—É–∂–µ–Ω
    if (typeof google === 'undefined' || !google.maps) {
        console.warn('Google Maps API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤');
        return;
    }
    
    clearApartmentMarkers(); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
    apartmentMarkers = []; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤

    if (!Array.isArray(apartments) || apartments.length === 0) {
        console.log('–ù–µ—Ç –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ');
        return;
    }

    apartments.forEach(apartment => {
        try {
            const position = { lat: apartment.latitude, lng: apartment.longitude };
            
            // –°–æ–∑–¥–∞–µ–º SVG –∏–∫–æ–Ω–∫—É —Å —Ü–µ–Ω–æ–π
            const svgIcon = {
                url: `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(`
                    <svg width="80" height="40" viewBox="0 0 80 40" xmlns="http://www.w3.org/2000/svg">
                        <rect x="0" y="0" width="70" height="30" rx="15" fill="#3b82f6" stroke="#1e40af" stroke-width="1"/>
                        <polygon points="70,10 80,20 70,30" fill="#3b82f6" stroke="#1e40af" stroke-width="1"/>
                        <text x="35" y="20" font-family="Arial, sans-serif" font-size="12" font-weight="bold" text-anchor="middle" fill="white">${apartment.pricePerNight || 0}</text>
                        <text x="35" y="32" font-family="Arial, sans-serif" font-size="8" text-anchor="middle" fill="white">–≥—Ä–Ω</text>
                    </svg>
                `)}`,
                scaledSize: new google.maps.Size(80, 40),
                anchor: new google.maps.Point(40, 20)
            };
            
                    const marker = new google.maps.Marker({
            position: position,
            map: map,
            title: apartment.title || '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç',
            icon: svgIcon
        });
            
            // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ
            const infoWindow = new google.maps.InfoWindow({
                content: `
                    <div class="info-window">
                        <h3>${apartment.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                        <p><strong>–¶–µ–Ω–∞:</strong> ${apartment.pricePerNight || 0} –≥—Ä–Ω/–Ω–æ—á—å</p>
                        <p><strong>–†–µ–π—Ç–∏–Ω–≥:</strong> ‚≠ê ${apartment.rating || 0}/5</p>
                        <p><strong>–ì–æ—Å—Ç–∏:</strong> üë• ${apartment.maxGuests || 1}</p>
                        <button onclick="openApartmentDetails(${JSON.stringify(apartment).replace(/"/g, '&quot;')})" class="info-window-btn">
                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </button>
                    </div>
                `
            });
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É
            marker.addListener('click', () => {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–∫–Ω–∞
                if (currentInfoWindow) {
                    currentInfoWindow.close();
                }
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–∫–Ω–æ
                infoWindow.open(map, marker);
                currentInfoWindow = infoWindow;
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ
                openApartmentDetails(apartment);
                
                // –í—ã–¥–µ–ª—è–µ–º –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ
                selectApartment(apartment);
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            apartment.marker = marker;
            apartmentMarkers.push(marker); // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ –º–∞—Å—Å–∏–≤
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:', apartment, error);
        }
    });
}

// –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
function clearApartmentMarkers() {
    if (!Array.isArray(apartments)) {
        console.warn('apartments –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', apartments);
        return;
    }
    
    apartments.forEach(apartment => {
        if (apartment.marker) {
            apartment.marker.setMap(null);
            apartment.marker = null;
        }
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
function createApartmentInfoWindow(apartment) {
    return `
        <div class="apartment-info-window">
            <div class="apartment-info-header">
                <h3>${apartment.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
                <div class="apartment-rating">
                    <span class="rating-stars">${'‚òÖ'.repeat(Math.floor(apartment.rating || 0))}${'‚òÜ'.repeat(5 - Math.floor(apartment.rating || 0))}</span>
                    <span class="rating-score">${apartment.rating || 0}</span>
                    <span class="review-count">(${apartment.reviewCount || 0})</span>
                </div>
            </div>
            <div class="apartment-info-body">
                <p class="apartment-address">üìç ${apartment.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p class="apartment-details">
                    üõèÔ∏è ${apartment.bedrooms || 1} —Å–ø–∞–ª—å–Ω–∏ ‚Ä¢ üöø ${apartment.bathrooms || 1} –≤–∞–Ω–Ω—ã–µ ‚Ä¢ üë• –¥–æ ${apartment.maxGuests || 1} –≥–æ—Å—Ç–µ–π
                </p>
                <p class="apartment-price">üí∞ ${apartment.pricePerNight || 0} –≥—Ä–Ω/–Ω–æ—á—å</p>
            </div>
            <button class="btn-view-apartment" onclick="viewApartmentDetails(${apartment.id})">
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏
            </button>
        </div>
    `;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
function displayApartmentsList() {
    const apartmentsList = document.getElementById('apartments-list');
    if (!apartmentsList) return;
    
    apartmentsList.innerHTML = '';
    
    if (!Array.isArray(apartments)) {
        console.warn('apartments –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –≤ displayApartmentsList:', apartments);
        return;
    }
    
    apartments.forEach(apartment => {
        const apartmentCard = createApartmentCard(apartment);
        apartmentsList.appendChild(apartmentCard);
    });
    
    updateApartmentsCount();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
function createApartmentCard(apartment) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!apartment || typeof apartment !== 'object') {
        console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:', apartment);
        return document.createElement('div'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π div –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
    
    const card = document.createElement('div');
    card.className = 'apartment-card';
    card.onclick = () => {
        selectApartment(apartment);
        openApartmentDetails(apartment);
    };
    
    const imageUrl = apartment.imageUrls && apartment.imageUrls.length > 0 
        ? apartment.imageUrls[0] 
        : 'https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?w=500';
    
    card.innerHTML = `
        <div class="apartment-image">
            <img src="${imageUrl}" alt="${apartment.title || '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç'}">
        </div>
        <div class="apartment-info">
            <h3 class="apartment-title">${apartment.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
            <p class="apartment-address">üìç ${apartment.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
            <div class="apartment-meta">
                <span class="price">${apartment.pricePerNight || 0} –≥—Ä–Ω/–Ω–æ—á—å</span>
                <span class="rating">‚≠ê ${apartment.rating || 0}</span>
                <span class="guests">üë• ${apartment.maxGuests || 1}</span>
            </div>
        </div>
    `;
    
    return card;
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
function filterApartments() {
    if (!Array.isArray(apartments)) {
        console.warn('apartments –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –≤ filterApartments:', apartments);
        return;
    }
    
    const priceFilter = document.getElementById('price-filter');
    const ratingFilter = document.getElementById('rating-filter');
    const guestsFilter = document.getElementById('guests-filter');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!priceFilter || !ratingFilter || !guestsFilter) {
        console.warn('–≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    const priceValue = priceFilter.value;
    const ratingValue = ratingFilter.value;
    const guestsValue = guestsFilter.value;
    
    const filteredApartments = apartments.filter(apartment => {
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        if (priceValue && apartment.pricePerNight > parseInt(priceValue)) {
            return false;
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        if (ratingValue && apartment.rating < parseFloat(ratingValue)) {
            return false;
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ—Å—Ç–µ–π
        if (guestsValue && apartment.maxGuests < parseInt(guestsValue)) {
            return false;
        }
        
        return true;
    });
    
    displayFilteredApartments(filteredApartments);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
function displayFilteredApartments(filteredApartments) {
    const apartmentsList = document.getElementById('apartments-list');
    if (!apartmentsList) {
        console.warn('–°–ø–∏—Å–æ–∫ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    apartmentsList.innerHTML = '';
    
    filteredApartments.forEach(apartment => {
        const card = createApartmentCard(apartment);
        apartmentsList.appendChild(card);
    });
    
    updateApartmentsCount(filteredApartments.length);
}

// –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
function resetFilters() {
    const priceFilter = document.getElementById('price-filter');
    const ratingFilter = document.getElementById('rating-filter');
    const guestsFilter = document.getElementById('guests-filter');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (priceFilter) priceFilter.value = '';
    if (ratingFilter) ratingFilter.value = '';
    if (guestsFilter) guestsFilter.value = '';
    
    displayApartmentsList();
}

// –í—ã–±–æ—Ä –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
function selectApartment(apartment) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    const allCards = document.querySelectorAll('.apartment-card');
    if (allCards && allCards.length > 0) {
        allCards.forEach(card => {
            card.classList.remove('selected');
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
    if (Array.isArray(apartments)) {
        const apartmentCards = document.querySelectorAll('.apartment-card');
        if (apartmentCards && apartmentCards.length > 0) {
            const apartmentIndex = apartments.findIndex(a => a.id === apartment.id);
            if (apartmentIndex !== -1 && apartmentCards[apartmentIndex]) {
                apartmentCards[apartmentIndex].classList.add('selected');
            }
        }
    }
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–µ
    if (typeof map !== 'undefined' && map && apartment.latitude && apartment.longitude) {
        map.setCenter({ lat: apartment.latitude, lng: apartment.longitude });
        map.setZoom(15);
    }
    
    selectedApartment = apartment;
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
function viewApartmentDetails(apartmentId) {
    if (!Array.isArray(apartments)) {
        console.warn('apartments –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –≤ viewApartmentDetails:', apartments);
        return;
    }
    
    const apartment = apartments.find(a => a.id === apartmentId);
    if (apartment) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        // –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
        console.log('–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:', apartment.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
        
        // –ü—Ä–∏–º–µ—Ä –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        openApartmentModal(apartment);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ
function openApartmentDetails(apartment) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!apartment || typeof apartment !== 'object') {
        console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:', apartment);
        return;
    }
    
    const detailsColumn = document.getElementById('apartment-details-column');
    const detailsContent = document.getElementById('apartment-details-content');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!detailsColumn || !detailsContent) {
        console.warn('–≠–ª–µ–º–µ–Ω—Ç—ã –¥–µ—Ç–∞–ª–µ–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
    const detailsHTML = `
        <div class="apartment-details">
            <div class="apartment-details-images">
                ${apartment.imageUrls && apartment.imageUrls.length > 0 
                    ? `<img src="${apartment.imageUrls[0]}" alt="${apartment.title || '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç'}" class="main-image">`
                    : '<div class="no-image">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>'
                }
            </div>
            
            <div class="apartment-details-info">
                <h2 class="apartment-title">${apartment.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h2>
                <p class="apartment-address">üìç ${apartment.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
                
                <div class="apartment-stats">
                    <div class="stat-item">
                        <span class="stat-label">–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å:</span>
                        <span class="stat-value price">${apartment.pricePerNight || 0} –≥—Ä–Ω</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–†–µ–π—Ç–∏–Ω–≥:</span>
                        <span class="stat-value rating">‚≠ê ${apartment.rating || 0}/5</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–ú–∞–∫—Å. –≥–æ—Å—Ç–µ–π:</span>
                        <span class="stat-value guests">üë• ${apartment.maxGuests || 1}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–°–ø–∞–ª—å–Ω–∏:</span>
                        <span class="stat-value">üõèÔ∏è ${apartment.bedrooms || 1}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–í–∞–Ω–Ω—ã–µ:</span>
                        <span class="stat-value">üöø ${apartment.bathrooms || 1}</span>
                    </div>
                </div>
                
                <div class="apartment-description">
                    <h3>–û–ø–∏—Å–∞–Ω–∏–µ</h3>
                    <p>${apartment.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                </div>
                
                ${apartment.amenities && apartment.amenities.length > 0 ? `
                    <div class="apartment-amenities">
                        <h3>–£–¥–æ–±—Å—Ç–≤–∞</h3>
                        <div class="amenities-list">
                            ${apartment.amenities.map(amenity => `<span class="amenity-tag">${amenity}</span>`).join('')}
                        </div>
                    </div>
                ` : ''}
                
                <div class="apartment-actions">
                    <button class="btn-primary">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button class="btn-secondary">–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ö–æ–∑—è–∏–Ω–æ–º</button>
                </div>
            </div>
        </div>
    `;
    
    detailsContent.innerHTML = detailsHTML;
    detailsColumn.classList.add('active');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–µ—Ç–∞–ª–µ–π –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
function closeApartmentDetails() {
    const detailsColumn = document.getElementById('apartment-details-column');
    if (detailsColumn) {
        detailsColumn.classList.remove('active');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (—Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
function openApartmentModal(apartment) {
    // –í–º–µ—Å—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ
    openApartmentDetails(apartment);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeApartmentModal() {
    const modal = document.querySelector('.apartment-modal');
    if (modal) {
        modal.remove();
    }
}

// –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
function bookApartment(apartmentId) {
    if (!Array.isArray(apartments)) {
        console.warn('apartments –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –≤ bookApartment:', apartments);
        return;
    }
    
    const apartment = apartments.find(a => a.id === apartmentId);
    if (apartment) {
        console.log('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:', apartment.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        alert(`–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ "${apartment.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}" –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ`);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
function updateApartmentsCount(count = null) {
    const countElement = document.getElementById('apartments-count');
    if (!countElement) return;
    
    let apartmentCount = 0;
    if (count !== null) {
        apartmentCount = count;
    } else if (Array.isArray(apartments)) {
        apartmentCount = apartments.length;
    } else {
        console.warn('apartments –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –≤ updateApartmentsCount:', apartments);
        apartmentCount = 0;
    }
    
    countElement.textContent = `${apartmentCount} –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤`;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.apartmentFunctions = {
    initializeApartments,
    loadApartments,
    generateMockApartments,
    loadAllApartments,
    displayApartmentsOnMap,
    displayApartmentsList,
    createApartmentCard,
    selectApartment,
    openApartmentDetails,
    closeApartmentDetails,
    filterApartments,
    resetFilters,
    updateApartmentsCount,
    clearApartmentMarkers
};
