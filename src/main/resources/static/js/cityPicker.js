let filteredCities = [];
let currentMarker = null; // –¢–µ–∫—É—â–∏–π –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ

// –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
function selectCity(city, lat, lng) {
    document.getElementById('cityInput').value = city;
    document.getElementById('autocomplete').style.display = 'none';

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —á–∏—Å–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    const latitude = Number(lat);
    const longitude = Number(lng);
    
    console.log('–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥:', city, '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', latitude, longitude);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
    if (map && !isNaN(latitude) && !isNaN(longitude) && 
        latitude >= -90 && latitude <= 90 && 
        longitude >= -180 && longitude <= 180) {
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (currentMarker) {
            currentMarker.setMap(null);
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
        currentMarker = new google.maps.Marker({
            position: { lat: latitude, lng: longitude },
            map: map,
            title: city,
            icon: {
                url: 'https://maps.google.com/mapfiles/ms/icons/red-dot.png',
                scaledSize: new google.maps.Size(32, 32)
            }
        });
        
        // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≥–æ—Ä–æ–¥—É
        map.panTo({ lat: latitude, lng: longitude });
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑—É–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ panTo
        const listener = map.addListener('idle', () => {
            map.setZoom(12);
            google.maps.event.removeListener(listener);
        });
    } else {
        console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', lat, lng);
    }
}

// –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
function clearCity() {
    document.getElementById('cityInput').value = '';
    document.getElementById('cityInput').focus();
    document.getElementById('cityInput').blur();
    
    // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–ª—è
    if (currentMarker) {
        currentMarker.setMap(null);
        currentMarker = null;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
function removeCityMarker() {
    if (currentMarker) {
        currentMarker.setMap(null);
        currentMarker = null;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
function getCurrentMarker() {
    return currentMarker;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function () {
    const cityInput = document.getElementById('cityInput');
    if (!cityInput) {
        return;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–æ–Ω–µ—Ü –ø—Ä–∏ –∫–ª–∏–∫–µ
    cityInput.addEventListener('click', function () {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞
        this.setSelectionRange(this.value.length, this.value.length);
        this.focus();
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–æ–Ω–µ—Ü –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
    cityInput.addEventListener('focus', function () {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
        this.setSelectionRange(this.value.length, this.value.length);
        filterCities(this.value).then(r => showAutocomplete(this));
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ä—Å–æ—Ä–∞ –≤ –∫–æ–Ω–µ—Ü –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞
    cityInput.addEventListener('input', function () {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
        setTimeout(() => {
            this.setSelectionRange(this.value.length, this.value.length);
        }, 0);
        filterCities(this.value).then(r => showAutocomplete(this));
    });

    // –°–∫—Ä—ã—Ç–∏–µ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ª—è
    document.addEventListener('click', function (e) {
        if (!e.target.closest('.destination')) {
            document.getElementById('autocomplete').style.display = 'none';
            
            // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —É–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
            const cityInput = document.getElementById('cityInput');
            if (cityInput && cityInput.value.trim() === '') {
                if (currentMarker) {
                    currentMarker.setMap(null);
                    currentMarker = null;
                }
            }
        }
    });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
window.addEventListener('error', function (e) {
    console.error('–û–®–ò–ë–ö–ê JavaScript:', e);
});

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –≤–≤–æ–¥—É
async function filterCities(input) {
    try {
        if (input.length < 2) {
            filteredCities = [];
            return;
        }

        const response = await fetch(`/api/settlements/search?query=${encodeURIComponent(input)}&limit=10`);
        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

        const data = await response.json();
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", data);

        if (data.success) {
            filteredCities = data.results.map(settlement => {
                const city = {
                    name: settlement.name,
                    lat: settlement.latitude || 0,
                    lng: settlement.longitude || 0,
                    type: settlement.type,
                    region: settlement.region,
                    district: settlement.district,
                    population: settlement.population
                };
                console.log("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥:", city);
                return city;
            });
        } else {
            filteredCities = [];
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–æ—Ä–æ–¥–æ–≤:", error);
        filteredCities = [];
    }
}

// –ü–æ–∫–∞–∑ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
function showAutocomplete(input) {
    let dropdown = document.getElementById('autocomplete');

    const rect = input.getBoundingClientRect();

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    dropdown.style.position = 'fixed';
    dropdown.style.top = 67 + 'px';
    dropdown.style.left = 25 + 'px';
    dropdown.style.width = rect.width + 100 + 'px';
    dropdown.style.backgroundColor = 'white';
    dropdown.style.border = '1px solid #e0e0e0';
    dropdown.style.borderRadius = '4px';
    dropdown.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
    dropdown.style.zIndex = '9999';
    dropdown.style.display = 'block';

    if (filteredCities.length > 0) {
        dropdown.innerHTML = filteredCities.map(city => {
            console.log("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", city);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ –∏ —Ä–µ–≥–∏–æ–Ω–µ
            let subtitle = city.region || '–£–∫—Ä–∞—ó–Ω–∞';
            if (city.type && city.region) {
                subtitle = `${city.type}, ${city.region}`;
            } else if (city.type) {
                subtitle = city.type;
            } else if (city.region) {
                subtitle = city.region;
            }
            
            console.log("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫:", subtitle);
            
            return `
                <div class="autocomplete-item" onclick="selectCity('${city.name}', ${city.lat}, ${city.lng})">
                    <div class="item-icon">üìç</div>
                    <div class="item-content">
                        <div class="item-title">${city.name}</div>
                        <div class="item-subtitle">${subtitle}</div>
                    </div>
                </div>
            `;
        }).join('');
    } else {
        dropdown.style.display = 'none';
    }
}
